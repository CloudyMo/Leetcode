Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.

Examples:

Input:
nums = [7,2,5,10,8]
m = 2

Output:
18

Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.

#############好有创意的题目#############
#############二分搜索来求解#############

class Solution(object):
    def splitArray(self, nums, m):
        """
        :type nums: List[int]
        :type m: int
        :rtype: int
        """
        
        #mi这个数是否有可能符合条件
        def is_ok(mi):
            current = 0
            cnt = 0
            for n in nums:
                current += n
                if current > mi:
                    cnt += 1
                    if cnt >= m:
                        return False
                    current = n
            return True
        
        #检索范围#
        l, r = max(nums), sum(nums)
        while (l <= r):
            mid = l + (r - l) / 2
            if is_ok(mid):
                r = mid - 1
            else:
                l = mid + 1
        return l
