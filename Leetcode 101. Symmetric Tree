Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following [1,2,2,null,3,null,3] is not:
    1
   / \
  2   2
   \   \
   3    3

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    
    def check_line(self, line):
        for i in xrange(len(line) / 2):
            if line[i] != line[-1 -i]:
                return False
        return True
        
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        this_level, next_level = [], []
        if not root:
            return True
        else:
            this_level = [root]
            while True:
                for v in this_level:
                    if not v:
                        continue
                    next_level.append(v.left)
                    next_level.append(v.right)
                line = []
                for a in this_level:
                    if a:
                        line.append(a.val)
                    else:
                        line.append(None)
                ret = self.check_line(line)
                #print line, ret
                if not ret:
                    return ret
                if next_level == []:
                    break
                this_level = list(next_level)
                next_level = []
            return True
                
