Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Note: Do not modify the linked list.


        
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        cycle_flag = 0
        if not head:
            return None
        elif not head.next:
            return None
        else:
          
            ### This is important ###
            ### First make a mistake for p2 = head.next ###
            ### 2 pointers must begin at the same position ###
            
            p1 = head
            p2 = head
            while (p1 and p2 and p2.next):
                p1 = p1.next
                p2 = p2.next.next
                
                if p1 == p2:
                    cycle_flag = 1
                    break
                
            if cycle_flag == 0:
                return None
            print p1.val, p2.val
            if p1 == p2:
                p1 = head
                while (p1 != p2):
                    p1 = p1.next
                    p2 = p2.next
                return p1
            else:
                return None


        
